module CapoMintHelpers


func hasSeedUtxo(tx: Tx, sTxId : TxId, sIdx: Int, reason: String) -> Bool {
    seedUtxo: TxOutputId = TxOutputId::new(
        sTxId,
        sIdx
    );
    assert(tx.inputs.any( (input: TxInput) -> Bool {
        input.output_id == seedUtxo
    }),  "seed utxo required for minting "+reason);

    true
}

func validateUUTminting(ctx: ScriptContext, sTxId : TxId, sIdx : Int, purposes: []String) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;
    idxBytes : ByteArray = sIdx.bound_max(255).serialize();
    // assert(idxBytes.length == 1, "surprise!");

    //! yuck: un-CBOR...
    rawTxId : ByteArray = sTxId.serialize().slice(5,37);

    txoId : ByteArray = (rawTxId + "@".encode_utf8() + idxBytes);
    assert(txoId.length == 34, "txId + @ + int should be length 34");
    // print( "******** txoId " + txoId.show());

    miniHash : ByteArray = txoId.blake2b().slice(0,6);
    assert(miniHash.length == 6, "urgh.  slice 5? expected 12, got "+ miniHash.length.show());

    assetValues = Value::sum(purposes.sort((a:String, b:String) -> Bool { a == b }).map(
        (purpose: String) -> Value {
            assetName : ByteArray = (purpose + "." + miniHash.show()).encode_utf8();
            assetClass : AssetClass = AssetClass::new(mph, assetName);

            Value::new(assetClass, 1)
        }
    ));
    expectedMint : Map[ByteArray]Int = assetValues.get_policy(mph);
    actualMint : Map[ByteArray]Int = value_minted.get_policy(mph);

    // print("redeemer" + sTxId.show() + " " + sIdx.show() + " asset " + assetName.show());
    // expectedMint.for_each( (b : ByteArray, i: Int) -> {
    //     print( "expected: " + b.show() + " " + i.show() )
    // });
    temp : []ByteArray = actualMint.fold( (l: []ByteArray, b : ByteArray, i: Int) -> {
        l.find_safe((x : ByteArray) -> Bool { x == b }).switch{
            None => l.prepend(b),
            Some => error("UUT purposes not unique")
        }
    }, []ByteArray{});
    assert(temp == temp, "prevent unused var");

    // actualMint.for_each( (b : ByteArray, i: Int) -> {
    //     print( "actual: " + b.show() + " " + i.show() )
    // });

    assert(expectedMint == actualMint, "bad UUT mint has mismatch;"+ 
        "\n   ... expected "+ assetValues.show()+
        "   ... actual "+ value_minted.show()+
        "   ... diff = " + (assetValues - value_minted).show()
    );
    hasSeedUtxo(tx, sTxId, sIdx, "UUT "+purposes.join("+"))
}