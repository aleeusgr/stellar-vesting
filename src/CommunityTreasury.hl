spending CommunityTreasury

// needed in helios 0.13: defaults
const mph : MintingPolicyHash = MintingPolicyHash::new(#1234)

enum Datum {
    CharterToken {
        trustees: []Address
        minSigs: Int
    }
}

enum Redeemer {
    foo
    mintingOriginalCharter
    updatingCharter{
        trustees: []Address
        minSigs: Int
    }
    usingAuthority
    mintingToken {
        tokenName: String
    }
}

func requiresAuthorization(ctx: ScriptContext, datum: Datum) -> Bool {
    Datum::CharterToken{trustees, minSigs} = datum;
    tx : Tx = ctx.tx;

    foundSigs: Int = trustees.fold[Int](
        (count: Int, a: Address) -> Int {
            trusteePkh : PubKeyHash = a.credential.switch{
                PubKey{h} => h,
                _ => error("trustee can't be a contract")
            };
            print("checking if trustee signed: " + trusteePkh.show());

            count + if (tx.is_signed_by(trusteePkh)) {1} else {0}
        }, 0
    );
    assert(foundSigs >= minSigs, 
        "not enough trustees ("+foundSigs.show()+ " of " + minSigs.show() + " needed) have signed the tx" 
    );

    true
}

func getCharterOutput(tx: Tx) -> TxOutput {
    charterTokenValue : Value = Value::new(
        AssetClass::new(mph, "charter".encode_utf8()), 
        1
    );
    tx.outputs.find_safe(
        (txo : TxOutput) -> Bool {
            txo.value >= charterTokenValue
        }
    ).switch{
        None => error("this could only happen if the charter token is burned."),
        Some{o} => o
    }
}



func preventCharterChange(ctx: ScriptContext, datum: Datum) -> Bool {
    tx: Tx = ctx.tx;

    charterOutput : TxOutput = getCharterOutput(tx);
    cvh : ValidatorHash = ctx.get_current_validator_hash();
    myself : Credential = Credential::new_validator(cvh);
    if (charterOutput.address.credential != myself) {
        actual : String = charterOutput.address.credential.switch{
            PubKey{pkh} => "pkh:ðŸ”‘#" + pkh.show(),
            Validator{vh} => "val:ðŸ“œ#:" + vh.show()
        };
        error(
            "charter token must be returned to the contract " + cvh.show() +
            "... but was sent to " +actual
        )
    };

    Datum::CharterToken{trustees, minSigs} = datum;
    Datum::CharterToken{newTrustees, newMinSigs} = Datum::from_data( 
        charterOutput.datum.get_inline_data() 
    );
    if ( !(
        newTrustees == trustees &&
        newMinSigs == minSigs
    )) { 
        error("invalid update to charter settings") 
    };

    true
}

func requiresProofOfNewTrustees(
    // ctx: ScriptContext
) -> Bool {
    if (false) { error("needs impl: requiresProofOfNewTrustees") };

    false
}


func main(datum: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    // now: Time = tx.time_range.start;
    
    notUpdatingCharter : Bool = redeemer.switch {
        updatingCharter => false,  
        _ => true
    };
    charterChangeAllowable : Bool = if(notUpdatingCharter) { 
        preventCharterChange(ctx, datum) // throws if it's not kosher
     } else { 
        true // "maybe", really
    };

    redeemerSpecificChecks : Bool = redeemer.switch {
        foo => { true },
        mintingOriginalCharter => {
            true
        },
        updatingCharter{trustees, minSigs} => { 
            assert(mph.serialize() != datum.serialize(), "guard failed"); // can't fail.
            assert(trustees.serialize() != trustees.serialize(), "guard failed"); // can't fail.
            assert(minSigs.serialize() != minSigs.serialize(), "guard failed"); // can't fail.
            
            // newDatum : Datum::CharterToken = Datum::CharterToken{trustees, minSigs};
            //!!! todo: requires ALL of the NEW trustees to sign, regardless of minSigs.

            requiresProofOfNewTrustees(/*ctx, newDatum */) &&
            requiresAuthorization(ctx, datum)
        },
        // authorizeByCharter{otherRedeemerData, otherSignatures} => {            
        //     false // todo support authorizing **other** things to be done with this token
        // },
        usingAuthority => {
            assert(mph.serialize() != datum.serialize(), "guard failed"); // can't fail.

            notUpdatingCharter &&
            requiresAuthorization(ctx, datum)
        },
        mintingToken{tokenName} => {
            //! guards from optimizing mph out of the program, screwing up parameterization
            assert(mph.serialize() != datum.serialize(), "guard failed"); // can't fail.
            tokenName == tokenName  &&
            notUpdatingCharter &&
            requiresAuthorization(ctx, datum)

            // findCharter : Option[TxInput] = tx.inputs.find_safe( (txi : TxInput) -> Bool {
            //     txi.output.value >= charterTokenValue
            // });
            // charterInput : TxInput = findCharter.switch{
            //     Some{i} => i,
            //     _ => error("missing required authorization token")
            // };
            
            // !initialTrustees.is_empty() &&
            // initialTrustees.head != initialTrustees.head &&
            // now < datum.deadline &&
            // tx.is_signed_by(datum.creator)
        }
    };

    charterChangeAllowable &&
    redeemerSpecificChecks &&
    tx.serialize() != datum.serialize()
}

const charterTokenBaseInfo: Datum::CharterToken = Datum::CharterToken{
    trustees: []Address{},
    minSigs: 1
}

// const mkCharterTokenDatum : (trustees: []Address, minSigs: Int) -> Datum::CharterSeed = (trustees: []Address, minSigs: Int) -> Datum::CharterSeed {
//      Datum::CharterToken{
//         nce: nce(),
//         trustees: trustees,
//         minSigs: minSigs
//     }
// }
