minting defaultMinter

const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42

enum Redeemer { 
    mintingCharterToken {
        owner: Address
    }
    mintingUUT {
        seedTxn: TxId
        seedIndex: Int
        assetName: ByteArray
    }
}

func hasSeedUtxo(tx: Tx, sTxId : TxId, sIdx: Int) -> Bool {
    seedUtxo: TxOutputId = TxOutputId::new(
        sTxId,
        sIdx
    );
    assert(tx.inputs.any( (input: TxInput) -> Bool {
        input.output_id == seedUtxo
    }),  "seed utxo required for minting the charter token");

    true
}

func hasContractSeedUtxo(tx: Tx) -> Bool {
    hasSeedUtxo(tx, seedTxn, seedIndex)
}


func main(r : Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;

    charterToken: AssetClass = AssetClass::new(
        mph,
        "charter".encode_utf8()
    );

    ok : Bool = r.switch {
        charter: mintingCharterToken => {       
            assert(value_minted == Value::new(charterToken, 1), "no charter token minted");

            hasContractSeedUtxo(tx) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.owner
                )
            })
        },
        mintingUUT{sTxId, sIdx, assetName} => {
            assetClass = AssetClass::new(mph, assetName);
            value : Value = Value::new(assetClass, 1);
            expectedMint : Map[ByteArray]Int = value.get_policy(mph);
            actualMint : Map[ByteArray]Int = value_minted.get_policy(mph);

            // print("redeemer" + sTxId.show() + " " + sIdx.show() + " asset " + assetName.show());
            // expectedMint.for_each( (b : ByteArray, i: Int) -> {
            //     print( "expected: " + b.show() + " " + i.show() )
            // });
            // actualMint.for_each( (b : ByteArray, i: Int) -> {
            //     print( "actual: " + b.show() + " " + i.show() )
            // });
            
            assert(expectedMint == actualMint, "bad UUT mint has mismatch");
            hasSeedUtxo(tx, sTxId, sIdx)
        },
        _ => true
    };

    print("defaultMinter: minting value: " + value_minted.show());

    ok
}

