minting defaultMinter

const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42

import { 
    hasSeedUtxo, 
    validateUUTminting
} from CapoMintHelpers

enum Redeemer { 
    mintingCharterToken {
        owner: Address
    }
    mintingUUTs {
        seedTxn: TxId
        seedIndex: Int
        //!!! todo: apply this everywhere else
        purposes: []String
    }
}

func hasContractSeedUtxo(tx: Tx) -> Bool {
    hasSeedUtxo(tx, seedTxn, seedIndex)
}

func main(r : Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;

    charterToken: AssetClass = AssetClass::new(
        mph,
        "charter".encode_utf8()
    );

    ok : Bool = r.switch {
        charter: mintingCharterToken => {       
            assert(value_minted == Value::new(charterToken, 1), "no charter token minted");

            hasContractSeedUtxo(tx) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.owner
                )
            })
        },

        mintingUUTs{sTxId, sIdx, purposes} => validateUUTminting(ctx, sTxId, sIdx, purposes),
        _ => true
    };

    print("defaultMinter: minting value: " + value_minted.show());

    ok
}

