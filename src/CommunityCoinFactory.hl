minting coinFactory

const seedTxn : TxId = TxId::new(#1234)
const seedIndex : Int = 42

enum Redeemer { 
    Charter {
        treasury: Address
    }
    Mint
    Burn
}

func hasSeedUtxo(tx: Tx) -> Bool {
    seedUtxo: TxOutputId = TxOutputId::new(
        seedTxn,
        seedIndex
    );
    assert(tx.inputs.any( (input: TxInput) -> Bool {
        input.output_id == seedUtxo
    }),  "seed utxo required for minting the charter token");

    true
}

func main(r : Redeemer, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    mph: MintingPolicyHash = ctx.get_current_minting_policy_hash();
    value_minted: Value = tx.minted;

    charterToken: AssetClass = AssetClass::new(
        mph,
        "charter".encode_utf8()
    );
    // print("hi");

    ok : Bool = r.switch {
        charter: Charter => {       
            assert(value_minted == Value::new(charterToken, 1), "no charter token minted");

            hasSeedUtxo(tx) &&
            tx.outputs.all( (output: TxOutput) -> Bool {
                output.value != value_minted || (
                    output.value == value_minted &&
                    output.address == charter.treasury
                )
            })
        },
        Mint => {
            charterTokenValue : Value = Value::new(
                AssetClass::new(ctx.get_current_minting_policy_hash(), "charter".encode_utf8()), 
                1
            );
            
            assert(tx.outputs.any((txo : TxOutput) -> Bool {
                txo.value >= charterTokenValue
            }),"missing required charter token authorization");

            // fooToken: AssetClass = AssetClass::new(
            //     ctx.get_current_minting_policy_hash(),
            //     tx.output.any((input: TxInput) -> Bool {
            //         tokenName: string = input.x.y
            //         tokenName.encode_utf8()
            //     }
            // );
        

            // tx.inputs
            //     .any((input: TxInput) -> Bool {
            //         print ("inp: "+ input.serialize().show() );
            //         foundCharter : Int = input.value.get_safe(charterToken);

            //         1 == foundCharter
            //     })
true    
        },
        Burn => {
            false
        },
        _ => true
    };

    print("coin factory: minting value: " + value_minted.show());

    ok
}

